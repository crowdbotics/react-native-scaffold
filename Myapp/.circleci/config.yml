
version: 2
jobs:
  node:
    working_directory: ~/build
    docker:
      - image: circleci/node:10
    steps:
      - checkout

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      #- run:
      #    name: jest tests
      #    command: |
      #      mkdir -p test-results/jest
      #      yarn run test
      #    environment:
      #      JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/build
          paths:
            - node_modules

      #- store_test_results:
      #    path: test-results

      #- store_artifacts:
      #    path: test-results

      - run:
          name: Webhook Failed
          command: bash ../.circleci/webhook_callback.sh "failed"
          when: on_fail

  android:
    working_directory: ~/build/android
    docker:
      - image: circleci/android:api-28-node
    steps:
      - checkout:
          path: ~/build

      - attach_workspace:
          at: ~/build

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      - run: bundle install

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: bundle exec fastlane tests
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane test
            mv fastlane/report.xml test-results/fastlane

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

      - run:
          name: Webhook Success
          command: bash ../.circleci/webhook_callback.sh "success"
          when: on_success

      - run:
          name: Webhook Failed
          command: bash ../.circleci/webhook_callback.sh "failed"
          when: on_fail

  ios:
    macos:
      xcode: "10.2.0"
    working_directory: ~/build

    # use a --login shell so our "set Ruby version" command gets picked up for later steps
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout

      - run:
          name: set Ruby version
          command:  echo "ruby-2.4" > ~/.ruby-version

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      # not using a workspace here as Node and Yarn versions
      # differ between our macOS executor image and the Docker containers above
      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

      - run:
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          command: bundle exec fastlane tests
          working_directory: ios

      - run:
          name: set up test results
          working_directory: ios
          when: always
          command: |
            mkdir -p test-results/fastlane test-results/xcode
            mv fastlane/report.xml test-results/fastlane
            mv fastlane/test_output/report.junit test-results/xcode/junit.xml

      - store_test_results:
          path: ios/test-results

      - store_artifacts:
          path: ios/test-results

      - run:
          name: Webhook Success
          command: bash ../.circleci/webhook_callback.sh "success"
          when: on_success

      - run:
          name: Webhook Failed
          command: bash ../.circleci/webhook_callback.sh "failed"
          when: on_fail

workflows:
  version: 2
  node-android-ios:
    jobs:
      - node
      - android:
          requires:
            - node
      - ios:
          requires:
            - node

