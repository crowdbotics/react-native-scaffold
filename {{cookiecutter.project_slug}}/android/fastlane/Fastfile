# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
require 'httparty'

base_name = "{{cookiecutter.project_slug}}"
ENV["APPETIZE_TOKEN"] = ""{{cookiecutter.appetize_token_api}}""

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build"
  lane :beta do
    gradle(task: "clean assembleRelease")
    upload_to_play_store(track: "beta")

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    upload_to_play_store(track: "beta", track_promote_to: "production")
  end

  desc "Deployment to Appetize"
  lane :deployAppetizeFeature do
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "./"
    )

    appetize(
          path: getLastAPKPath,
          api_token: "#{ENV["APPETIZE_TOKEN"]}", 
          public_key: getAppetizePublicKey({platform: "android"}) ,
          platform: 'android',
          note: base_name,
        )

    updateURL(
      context: 'Appetize Android',
      state: 'success',
      url: "#{lane_context[SharedValues::APPETIZE_APP_URL]}",
      description: 'Android build succeed'
    )
  end

  # get the publicKey of the appetizeApp corresponding to your base_name
  private_lane :getAppetizePublicKey do |options|
    publicKey = ""

    response = HTTParty.get("https://#{ENV["APPETIZE_TOKEN"]}@api.appetize.io/v1/apps")
    json = JSON.parse(response.body)

    # Find branch name in notes
    json["data"].each do |value|
      if value["note"] == base_name && value["platform"] == options[:platform]
        publicKey = value["publicKey"]
      end
    end

    publicKey
  end

  # Update app URL in CB app DB
  private_lane :updateURL do |options|
    puts "URL: " + options[:url]

    #post to CB API
  end

  # find the path of the last apk build
  private_lane :getLastAPKPath_old do
    apk_search_path = File.join('./', 'app', 'build', 'outputs', 'apk', 'release', '*.apk')
    puts 'apk_search_path: ' + apk_search_path

    new_apks = Dir[apk_search_path].reject { |path| path =~ /^.*-unaligned.apk$/i}

    new_apks = new_apks.map { |path| File.expand_path(path)}
    last_apk_path = new_apks.sort_by(&File.method(:mtime)).last
    puts 'last_apk_path: ' + last_apk_path
    last_apk_path
  end

  private_lane :getLastAPKPath do
    last_apk_path = "#{lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]}"
    puts 'last_apk_path: ' + last_apk_path
    last_apk_path
  end
end
