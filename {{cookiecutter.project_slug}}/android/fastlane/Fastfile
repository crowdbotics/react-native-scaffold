# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Opt out of sending fastlane usage metrics
opt_out_usage

fastlane_require 'httparty'

base_name = "{{cookiecutter.project_slug}}"

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build"
  lane :beta do
    gradle(task: "clean assembleRelease")
    upload_to_play_store(track: "beta")

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    upload_to_play_store(track: "beta", track_promote_to: "production")
  end

  desc "Deployment to Appetize"
  lane :deploy_appetize do
    gradle(
      task: "assemble",
      build_type: "Release"
    )

    appetize(
      path: get_last_apk_path,
      public_key: get_appetize_public_key({platform: "android"}),
      platform: 'android',
      note: base_name
    )

    update_url(
      context: 'Appetize Android',
      state: 'success',
      url: "#{lane_context[SharedValues::APPETIZE_APP_URL]}",
      description: 'Android build succeed'
    )
  end

  # get the publicKey of the appetizeApp corresponding to your base_name
  private_lane :get_appetize_public_key do |options|
    public_key = ""

    response = HTTParty.get("https://#{ENV["APPETIZE_API_TOKEN"]}@api.appetize.io/v1/apps")
    json = JSON.parse(response.body)

    # Find branch name in notes
    json["data"].each do |value|
      if value["note"] == base_name && value["platform"] == options[:platform]
        public_key = value["publicKey"]
      end
    end

    public_key
  end

  # Update app URL in CB app DB
  private_lane :update_url do |options|
    puts "URL: #{options[:url]}"

    #post to CB API
  end
end

def get_last_apk_path
  last_apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  puts "last_apk_path: #{last_apk_path}"
  last_apk_path
end
