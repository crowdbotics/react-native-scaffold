# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Opt out of sending fastlane usage metrics
opt_out_usage

fastlane_require 'httparty'

default_platform(:ios)

app_name = "{{cookiecutter.project_dash_slug}}"
base_name = "{{cookiecutter.project_slug}}"
team_name = "Crowdbotics Corporation"
team_id = "6YKR59QXKM"
filename = "#{base_name}.xcodeproj"
workspace_name = "#{base_name}.xcworkspace"
identifier = "com.crowdbotics.#{app_name}"

ENV["APPETIZE_TOKEN"] = "{{cookiecutter.appetize_token_api}}"
ENV["APP_IOS_SCHEME"] = "{{cookiecutter.project_slug}}"

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Runs all the tests"
  lane :tests do
    run_tests(workspace: workspace_name, scheme: base_name, build_for_testing: true)
  end

  desc "Pre-build setup"
  lane :build_setup do
    produce(
      app_identifier: identifier,
      app_name: app_name,
      team_name: team_name,
      itc_team_name: team_name
    )
    increment_build_number(xcodeproj: filename)
    update_app_identifier(
      xcodeproj: filename,
      plist_path: "#{base_name}/Info.plist",
      app_identifier: identifier
    )
    update_project_team(path: filename, teamid: team_id)
    match(type: "appstore", readonly: false)
    disable_automatic_code_signing(
      path: filename,
      code_sign_identity: "iPhone Distribution: #{team_name} (#{team_id})"
    )

  desc "Push a new beta build to TestFlight"
  lane :beta do
    build_setup

    settings_to_override = {
      BUNDLE_IDENTIFIER: identifier,
      PROVISIONING_PROFILE_SPECIFIER: "match AppStore #{identifier}"
    }
    build_app(
      scheme: base_name,
      export_method: "app-store",
      xcargs: settings_to_override,
    )
    upload_to_testflight(
      email: "{{cookiecutter.owner_email}}",
      beta_app_description: "Beta version of #{app_name} uploaded by Crowdbotics"
    )
  end

  desc "Deployment to Appetize"
  lane :deploy_appetize do
    build_setup

    tmp_path = "/tmp/fastlane_build"

    # Not possible to use gym here because it will only create an ipa archive
    xcodebuild(
      configuration: "Release",
      sdk: "iphonesimulator",
      derivedDataPath: tmp_path,
      xcargs: "CONFIGURATION_BUILD_DIR=#{tmp_path}",
      scheme: base_name
    )

    app_path = Dir[File.join(tmp_path, "**", "*.app")].last

    zipped_bundle = zip(path: app_path, output_path: File.join(tmp_path, "app.zip"))

    appetize(
      path: zipped_bundle,
      public_key: get_appetize_public_key({platform: "ios"}),
      note: base_name
    )

    update_url(
      context: 'Appetize iOS',
      state: 'success',
      url: lane_context[SharedValues::APPETIZE_APP_URL],
      description: 'iOS build succeed'
    )
  end

  # get the publicKey of the appetizeApp corresponding to your base_name
  private_lane :get_appetize_public_key do |options|
    public_key = ""

    response = HTTParty.get("https://#{ENV["APPETIZE_API_TOKEN"]}@api.appetize.io/v1/apps")
    json = JSON.parse(response.body)

    # Find branch name in notes
    json["data"].each do |value|
      if value["note"] == base_name && value["platform"] == options[:platform]
        public_key = value["publicKey"]
      end
    end

    public_key
  end

  # Update app URL in CB app DB
  private_lane :update_url do |options|
    puts "URL: #{options[:url]}"

    #post to CB API
  end
end
